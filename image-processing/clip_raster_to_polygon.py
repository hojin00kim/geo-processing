"""
This tool does clipping (or subsetting) raster to polygon boundary(s) of individual single plot.
This tool is specifically used for processing UAV/MAV imagery acquired over Monsanto Breeding or CRF fields.
User defined shapefile can be used but need to change an attribute of the shapefile with which raster
will be cropped.

Please change line 64
    'outfile = os.path.join(temp_dir, "%s.shp" % f['properties']['ColRange'])'
in the "shapefile_split_by_feature" function accordingly.

Inputs: raster image in geotiff format and polygon shapefile in .shp format
* Both raster and polygon must have the same projection/coordinate systems

Use case: UAV CCVR and CCVR_CV (previously LAI/LAICV) processing requires plot images that are subset from
    stitched image.
"""

import os
import shutil

import fiona
import fnmatch
import geopandas as gpd
import rasterio
from rasterio.mask import mask
from tkinter import *
from tkinter.filedialog import askopenfilename


def modify_shapefile_attributes(infile):
    """
    modify attributes of plot grid shapefile generated by ENVI module (or other)
     and save updated shapefile into a temporary folder
    """

    gdf = gpd.GeoDataFrame.from_file(infile)

    # convert column type to string
    gdf['Column'] = gdf['Column'].astype(str)
    gdf['Range'] = gdf['Range'].astype(str)

    # combine Range and Column ID to make plot grid ID
    gdf['ColRange'] = 'C' + gdf['Column'] + '_R' + gdf['Range']

    outname = os.path.join((os.path.dirname(infile)), 'grid_updated.shp')

    gdf.to_file(driver = 'ESRI Shapefile', filename = outname)

    #return outname


def shapefile_split_by_feature(infile):
    """
    This is for splitting shapefile that has multiple features
    :param infile: shapefile with .shp format
    :return: does not return anything, but save individual feature in a temp folder
    """
    temp_dir = os.path.dirname(infile) + '/temp'

    if not os.path.exists(temp_dir):
        os.makedirs(temp_dir)

    with fiona.open(infile) as source:
        meta = source.meta  # metadata information

        for f in source:

            outfile = os.path.join(temp_dir, "%s.shp" % f['properties']['ColRange'])

            with fiona.open(outfile, 'w', **meta) as sink:
                sink.write(f)
    # return temp_dir


def find_plot_shp_files(path, filter):

    for root, dirs, files in os.walk(path, filter):
        for f in fnmatch.filter(files, filter):
            yield os.path.join(root, f)


def do_process(input_vector, input_raster):

    modify_shapefile_attributes(input_vector)

    shapefile = os.path.join((os.path.dirname(input_vector)), 'grid_updated.shp')

    if os.path.isfile(shapefile):
        print ("File exists and is readable")
    else:
        print ("Either file is missing or is not readable")

    shapefile_split_by_feature(shapefile)

    temp_dir = os.path.join((os.path.dirname(shapefile)), 'temp')

    for shp in find_plot_shp_files(temp_dir, '*.shp'):
        print (shp)

        out_dir = os.path.join(os.path.dirname(raster_path), 'subset')

        if not os.path.exists(out_dir):
            os.makedirs(out_dir)

        outfile_prefix = os.path.basename(shp).split('.')[0]
        outfile = outfile_prefix + '.tif'


        outname = os.path.join(out_dir, outfile)

        with fiona.open(shp, "r") as shapefile:
            geoms = [feature["geometry"] for feature in shapefile]

        with rasterio.open(input_raster) as src:
            out_image, out_transform = mask(src, geoms, crop=True, invert=False)
            out_meta = src.meta.copy()

        out_meta.update({"driver": "GTiff",
                         "height": out_image.shape[1],
                         "width": out_image.shape[2],
                         "transform": out_transform})

        with rasterio.open(outname, "w", **out_meta) as dest:
            dest.write(out_image)

    try:
        shutil.rmtree(temp_dir)
    except OSError as err:
        print ("Error: %s - %s." % (err.filename, err.strerror))


if __name__ == "__main__":

    root = Tk()
    root.withdraw()

    shp_path = askopenfilename(filetypes=[('.shpfiles', '.shp')], title='Select shapefile')
    print(shp_path)

    raster_path = askopenfilename(filetypes=[('.tiffiles', '.tif')], title='Select input tiff file')
    print(raster_path)
    root.withdraw()

    do_process(shp_path, raster_path)
